import os
from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, ChatMemberHandler, ContextTypes, filters
)

TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "123456789"))

APPLICATIONS_FILE = "applications.txt"

SOCIAL_LINKS = (
    "–ù–∞—à—ñ —Å–æ—Ü–º–µ—Ä–µ–∂—ñ:\n"
    "<a href='https://www.facebook.com/groups/1814614405457006?locale=uk_UA'>Facebook</a>\n"
    "<a href='https://t.me/estransuanor'>Telegram</a>"
)

CONTACT_LINKS = (
    "üìû –ö–æ–Ω—Ç–∞–∫—Ç–∏ –≤–æ–¥—ñ—è:\n"
    "WhatsApp: https://wa.me/380963508202\n"
    "Telegram: https://t.me/Phant0mWAdeR\n"
    "–¢–µ–ª–µ—Ñ–æ–Ω: +4796801527\n"
    "–¢–µ–ª–µ—Ñ–æ–Ω: +380963508202"
)

CHOOSING, CHOOSING_ORDER_TYPE, NAME, PHONE, ADDRESS, DATE, MESSAGE = range(7)

def main_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üì¶ –û—Ñ–æ—Ä–º–∏—Ç–∏ –ø–æ—Å–∏–ª–∫—É", callback_data="make_order")],
        [InlineKeyboardButton("üßç –ü–∞—Å–∞–∂–∏—Ä", callback_data="passenger")],
        [
            InlineKeyboardButton("üìû –ó–≤‚Äô—è–∑–æ–∫ –∑ –≤–æ–¥—ñ—î–º", callback_data="contact_driver"),
            InlineKeyboardButton("üìã –£–º–æ–≤–∏ —Ç–∞ —Ä–æ–∑—Ü—ñ–Ω–∫–∏", callback_data="pricing")
        ],
        [InlineKeyboardButton("üõí –ó–∞–º–æ–≤–∏—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏", callback_data="order_products")],
        [InlineKeyboardButton("üîç –ü–æ—à—É–∫ –∑–∞—è–≤–∫–∏", callback_data="search")]
    ])

def order_type_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üá≥üá¥ –ó –ù–æ—Ä–≤–µ–≥—ñ—ó‚¨Öüì¶", callback_data="order_norway")],
        [InlineKeyboardButton("üá∫üá¶ –ó –£–∫—Ä–∞—ó–Ω–∏‚û°Ô∏èüì¶", callback_data="order_ukraine")]
    ])

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    context.chat_data.clear()

    if update.message:
        await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=main_menu())
    elif update.callback_query:
        await update.callback_query.answer()
        await update.callback_query.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=main_menu())

    return CHOOSING

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data.clear()
    context.chat_data.clear()
    await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu())
    return CHOOSING

async def force_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.chat_member:
        status = update.chat_member.new_chat_member.status
        if status == "member":
            chat_id = update.effective_chat.id
            await context.bot.send_message(chat_id=chat_id, text="–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä—ñ—Ç—å –¥—ñ—é:", reply_markup=main_menu())

async def choose_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "make_order":
        await query.message.edit_text("–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–∞—è–≤–∫–∏:", reply_markup=order_type_menu())
        return CHOOSING_ORDER_TYPE
    elif data == "passenger":
        context.user_data["order_type"] = "passenger"
        await query.message.edit_text("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ –ª–∞—Ç–∏–Ω–∏—Ü–µ—é:")
        return NAME
    elif data == "contact_driver":
        await query.message.edit_text(
            f"<b>üì® –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:</b>\n\n{SOCIAL_LINKS}\n\n{CONTACT_LINKS}",
            reply_markup=main_menu(),
            parse_mode="HTML",
            disable_web_page_preview=True
        )
    elif data == "pricing":
        await query.message.edit_text("üìã –£–º–æ–≤–∏ —Ç–∞ —Ä–æ–∑—Ü—ñ–Ω–∫–∏: https://t.me/estransuanor/13", reply_markup=main_menu())
    elif data == "search":
        context.user_data['searching'] = True
        await query.message.edit_text("üîç –í–≤–µ–¥—ñ—Ç—å –∫–ª—é—á–æ–≤—ñ —Å–ª–æ–≤–∞ –¥–ª—è –ø–æ—à—É–∫—É –∑–∞—è–≤–∫–∏:")
        return MESSAGE
    elif data == "order_products":
        await query.message.edit_text("üõí –í–≤–µ–¥—ñ—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤ –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è:")
        return MESSAGE

    return CHOOSING

async def choose_order_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['order_type'] = query.data
    await query.message.edit_text("–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è:")
    return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    return PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['phone'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É:")
    return ADDRESS

async def get_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['address'] = update.message.text

    if context.user_data.get("order_type") == "passenger":
        await update.message.reply_text("–í–∫–∞–∂—ñ—Ç—å –¥–∞—Ç—É –ø–æ—ó–∑–¥–∫–∏:")
        return DATE
    else:
        await update.message.reply_text("–ù–∞–¥–∞–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å –ø–æ—Å–∏–ª–∫–∏:")
        return MESSAGE

async def get_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['date'] = update.message.text
    await update.message.reply_text("–ù–∞–¥–∞–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å:")
    return MESSAGE

async def get_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text

    if context.user_data.get('searching'):
        context.user_data['searching'] = False
        results = []

        if os.path.exists(APPLICATIONS_FILE):
            with open(APPLICATIONS_FILE, "r", encoding="utf-8") as file:
                applications = file.read().split("\n\n")
                for app in applications:
                    if text.lower() in app.lower():
                        results.append(app)

        if results:
            for result in results[:5]:
                await update.message.reply_text(f"üîé –ó–Ω–∞–π–¥–µ–Ω–æ:\n{result}")
        else:
            await update.message.reply_text("‚ùå –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∑–∞ –≤–∞—à–∏–º –∑–∞–ø–∏—Ç–æ–º.")

        return CHOOSING

    context.user_data['message'] = text

    # –°–ø–æ—á–∞—Ç–∫—É –∫–æ–Ω—Ç–∞–∫—Ç–∏
    await update.message.reply_text(
        f"<b>üì® –ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:</b>\n\n{SOCIAL_LINKS}\n\n{CONTACT_LINKS}",
        parse_mode="HTML",
        disable_web_page_preview=True
    )

    # –ü–æ—Ç—ñ–º –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è —Ç–∞ –º–µ–Ω—é
    await update.message.reply_text("‚úÖ –î–∞–Ω—ñ –æ—Ç—Ä–∏–º–∞–Ω–æ. –î—è–∫—É—î–º–æ!", reply_markup=main_menu())

    # –í —Å–∞–º–æ–º—É –∫—ñ–Ω—Ü—ñ ‚Äî –∑–∞—è–≤–∫–∞
    await save_application(update, context)

    return CHOOSING

async def save_application(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    username = user.username or user.full_name

    summary = (
        f"üì¨ –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –≤—ñ–¥ @{username} (ID: {user_id}):\n"
        f"üë§ –Ü–º‚Äô—è: {context.user_data.get('name')}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data.get('phone')}\n"
        f"üìç –ê–¥—Ä–µ—Å–∞: {context.user_data.get('address')}\n"
    )

    if context.user_data.get("order_type") == "passenger":
        summary += f"üìÖ –î–∞—Ç–∞ –ø–æ—ó–∑–¥–∫–∏: {context.user_data.get('date')}\n"

    summary += f"üìù –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {context.user_data.get('message')}"

    await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=summary)
    await update.message.reply_text(f"–û—Å—å –≤–∞—à–∞ –∑–∞—è–≤–∫–∞:\n\n{summary}")

    with open(APPLICATIONS_FILE, "a", encoding="utf-8") as file:
        file.write(summary + "\n\n")

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            CHOOSING: [CallbackQueryHandler(choose_action)],
            CHOOSING_ORDER_TYPE: [CallbackQueryHandler(choose_order_type)],
            NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
            ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_address)],
            DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_date)],
            MESSAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_message)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(conv_handler)
    app.add_handler(ChatMemberHandler(force_start, ChatMemberHandler.MY_CHAT_MEMBER))
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("cancel", cancel))

    app.run_polling()

if __name__ == "__main__":
    main()
