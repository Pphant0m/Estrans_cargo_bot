import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, ContextTypes, filters
)

# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ===
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "123456789"))
APPLICATIONS_FILE = "applications.txt"  # –§–∞–π–ª –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞—è–≤–æ–∫

if not TOKEN:
    raise RuntimeError("‚ùå BOT_TOKEN is missing!")

# === –°—Ç–∞–Ω–∏ ===
(
    CHOOSING, CHOOSING_ORDER_TYPE, NAME, PHONE, ADDRESS, MESSAGE,
    PASSENGER_NAME, PASSENGER_BIRTHDATE, PASSENGER_PHONE, PASSENGER_ADDRESS,
    SEARCH, PRODUCT_ORDER
) = range(12)

# === –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏ ===
SOCIAL_LINKS = (
    "–î—è–∫—É—î–º–æ –∑–∞ –∑–∞—è–≤–∫—É!\n\n–ù–∞—à—ñ —Å–æ—Ü–º–µ—Ä–µ–∂—ñ:\n"
    "<a href='https://www.facebook.com/groups/1814614405457006?locale=uk_UA'>Facebook</a>\n"
    "<a href='https://t.me/estransuanor'>Telegram</a>"
)
CONTACT_LINKS = (
    "\nüìû –ö–æ–Ω—Ç–∞–∫—Ç–∏ –≤–æ–¥—ñ—è:\n"
    "WhatsApp: https://wa.me/380963508202\n"
    "Telegram: https://t.me/Phant0mWAdeR\n"
    "–¢–µ–ª–µ—Ñ–æ–Ω: +4796801527\n"
    "–¢–µ–ª–µ—Ñ–æ–Ω: +380963508202"
)
PRICING_URL = "https://t.me/estransuanor/13"

# === –ú–µ–Ω—é –∫–Ω–æ–ø–æ–∫ ===
def main_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üá≥üá¥ üá∫üá¶ üì¶ –û—Ñ–æ—Ä–º–∏—Ç–∏ –ø–æ—Å–∏–ª–∫—É", callback_data="make_order")],
        [InlineKeyboardButton("üßç –ü–∞—Å–∞–∂–∏—Ä", callback_data="passenger")],
        [
            InlineKeyboardButton("üìû –ó–≤‚Äô—è–∑–æ–∫ –∑ –≤–æ–¥—ñ—î–º", callback_data="contact_driver"),
            InlineKeyboardButton("üìã –£–º–æ–≤–∏ —Ç–∞ —Ä–æ–∑—Ü—ñ–Ω–∫–∏", callback_data="pricing")
        ],
        [InlineKeyboardButton("üõí –ó–∞–º–æ–≤–∏—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏", callback_data="order_products")],
        [InlineKeyboardButton("üîç –ü–æ—à—É–∫ –∑–∞—è–≤–∫–∏", callback_data="search")]
    ])

def order_type_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üá≥üá¥ –ó –ù–æ—Ä–≤–µ–≥—ñ—ó", callback_data="order_norway")],
        [InlineKeyboardButton("üá∫üá¶ –ó –£–∫—Ä–∞—ó–Ω–∏", callback_data="order_ukraine")]
    ])

# === –î–æ–ø–æ–º—ñ–∂–Ω—ñ —Ñ—É–Ω–∫—Ü—ñ—ó ===
async def safe_send(query, text: str, reply_markup=None):
    try:
        await query.message.edit_text(text, reply_markup=reply_markup, parse_mode="HTML")
    except Exception:
        await query.message.reply_text(text, reply_markup=reply_markup, parse_mode="HTML")

async def save_application(summary: str):
    with open(APPLICATIONS_FILE, "a", encoding="utf-8") as f:
        f.write(summary + "\n\n")

async def send_summary(context: ContextTypes.DEFAULT_TYPE, user_id: int, summary: str):
    await context.bot.send_message(chat_id=user_id, text="‚úÖ –ü—Ä–∏–π–Ω—è—Ç–æ!\n\n" + summary)
    await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=summary)

# === –û–±—Ä–æ–±–Ω–∏–∫–∏ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message = update.message or update.callback_query
    await safe_send(message, "–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –¥—ñ—é:", main_menu())
    return CHOOSING

async def choose_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    actions = {
        "make_order": (safe_send, "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–∞—è–≤–∫–∏:", order_type_menu, CHOOSING_ORDER_TYPE),
        "passenger": (safe_send, "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ –ª–∞—Ç–∏–Ω–∏—Ü–µ—é:", None, PASSENGER_NAME),
        "contact_driver": (safe_send, CONTACT_LINKS, main_menu, CHOOSING),
        "pricing": (safe_send, f"–û–∑–Ω–∞–π–æ–º—Ç–µ—Å—è –∑ —É–º–æ–≤–∞–º–∏:\n{PRICING_URL}", main_menu, CHOOSING),
        "search": (safe_send, "–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—à—É–∫—É:", None, SEARCH),
        "order_products": (safe_send, "üõí –í–≤–µ–¥—ñ—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤:", None, PRODUCT_ORDER)
    }
    if data := actions.get(query.data):
        await data[0](query, data[1], data[2]() if data[2] else None)
        return data[3]
    return CHOOSING

async def choose_order_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    context.user_data['order_type'] = query.data
    await safe_send(query, "–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º‚Äô—è:" if query.data == "order_norway" else "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è –æ—Ç—Ä–∏–º—É–≤–∞—á–∞:")
    return NAME

async def simple_input(update: Update, context: ContextTypes.DEFAULT_TYPE, next_state: int, key: str, prompt: str):
    context.user_data[key] = update.message.text
    await update.message.reply_text(prompt)
    return next_state

# === –ó–±—ñ—Ä –¥–∞–Ω–∏—Ö ===
async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await simple_input(update, context, PHONE, 'name', "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await simple_input(update, context, ADDRESS, 'phone', "–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É:")

async def get_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await simple_input(update, context, MESSAGE, 'address', "–û–ø–∏—à—ñ—Ç—å –ø–æ—Å–∏–ª–∫—É:")

async def get_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['message'] = update.message.text
    user = update.effective_user
    summary = (
        f"üì¨ –ù–æ–≤–∞ {context.user_data['order_type']} –≤—ñ–¥ @{user.username or user.full_name}:\n"
        f"üë§ –Ü–º‚Äô—è: {context.user_data['name']}\nüìû –¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone']}\n"
        f"üìç –ê–¥—Ä–µ—Å–∞: {context.user_data['address']}\nüìù –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {context.user_data['message']}"
    )
    await send_summary(context, user.id, summary)
    await update.message.reply_text(SOCIAL_LINKS, parse_mode="HTML")
    await update.message.reply_text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=main_menu())
    await save_application(summary)
    return CHOOSING

# === –ü–∞—Å–∞–∂–∏—Ä ===
async def get_passenger_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await simple_input(update, context, PASSENGER_BIRTHDATE, 'passenger_name', "–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è:")

async def get_passenger_birthdate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await simple_input(update, context, PASSENGER_PHONE, 'passenger_birthdate', "–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")

async def get_passenger_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await simple_input(update, context, PASSENGER_ADDRESS, 'passenger_phone', "–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –∑–∞–±–æ—Ä—É:")

async def get_passenger_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['passenger_address'] = update.message.text
    user = update.effective_user
    summary = (
        f"üöå –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –ø–∞—Å–∞–∂–∏—Ä–∞ –≤—ñ–¥ @{user.username or user.full_name}:\n"
        f"üë§ –Ü–º‚Äô—è: {context.user_data['passenger_name']}\nüéÇ –î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: {context.user_data['passenger_birthdate']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['passenger_phone']}\nüìç –ê–¥—Ä–µ—Å–∞: {context.user_data['passenger_address']}"
    )
    await send_summary(context, user.id, summary)
    await update.message.reply_text(SOCIAL_LINKS, parse_mode="HTML")
    await update.message.reply_text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=main_menu())
    await save_application(summary)
    return CHOOSING

# === –ü–æ—à—É–∫ –∑–∞—è–≤–æ–∫ ===
async def search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text.lower()
    if not os.path.exists(APPLICATIONS_FILE):
        await update.message.reply_text("üìÇ –ë–∞–∑–∞ –ø—É—Å—Ç–∞.", reply_markup=main_menu())
        return CHOOSING
    with open(APPLICATIONS_FILE, "r", encoding="utf-8") as f:
        results = [app.strip() for app in f.read().lower().split("\n\n") if query in app]
    for res in results:
        await update.message.reply_text(f"üîé –ó–Ω–∞–π–¥–µ–Ω–æ:\n\n{res}")
    if not results:
        await update.message.reply_text("‚ùå –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
    await update.message.reply_text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=main_menu())
    return CHOOSING

# === –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ ===
async def get_product_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    summary = (
        f"üõí –ó–∞–º–æ–≤–ª–µ–Ω–Ω—è –≤—ñ–¥ @{user.username or user.full_name}:\n"
        f"üìù –°–ø–∏—Å–æ–∫:\n{update.message.text}"
    )
    await send_summary(context, user.id, summary)
    await update.message.reply_text(SOCIAL_LINKS, parse_mode="HTML")
    await update.message.reply_text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=main_menu())
    await save_application(summary)
    return CHOOSING

# === –°–∫–∞—Å—É–≤–∞–Ω–Ω—è ===
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu())
    return CHOOSING

# === –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É ===
app = ApplicationBuilder().token(TOKEN).build()

conv_handler = ConversationHandler(
    entry_points=[
        CommandHandler("start", start),
        MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS | filters.StatusUpdate.LEFT_CHAT_MEMBER, start),
        MessageHandler(filters.TEXT & ~filters.COMMAND, start),
        CallbackQueryHandler(choose_action)
    ],
    states={
        CHOOSING: [CallbackQueryHandler(choose_action)],
        CHOOSING_ORDER_TYPE: [CallbackQueryHandler(choose_order_type)],
        NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
        PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
        ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_address)],
        MESSAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_message)],
        PASSENGER_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_passenger_name)],
        PASSENGER_BIRTHDATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_passenger_birthdate)],
        PASSENGER_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_passenger_phone)],
        PASSENGER_ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_passenger_address)],
        SEARCH: [MessageHandler(filters.TEXT & ~filters.COMMAND, search)],
        PRODUCT_ORDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_product_order)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
)

app.add_handler(conv_handler)

if __name__ == "__main__":
    print("üü¢ Estrans Cargo Bot –∑–∞–ø—É—â–µ–Ω–æ (polling)...")
    app.run_polling()
