import os
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, ContextTypes, filters
)

# === –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ===
TOKEN = os.getenv("BOT_TOKEN")
ADMIN_CHAT_ID = int(os.getenv("ADMIN_CHAT_ID", "123456789"))

if not TOKEN:
    raise RuntimeError("‚ùå BOT_TOKEN is missing!")

APPLICATIONS_FILE = "applications.txt"  # –§–∞–π–ª –¥–ª—è –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—è –∑–∞—è–≤–æ–∫

# === –°—Ç–∞–Ω–∏ ===
CHOOSING, CHOOSING_ORDER_TYPE, NAME, PHONE, ADDRESS, MESSAGE = range(6)
PASSENGER_NAME, PASSENGER_BIRTHDATE, PASSENGER_PHONE, PASSENGER_ADDRESS, PASSENGER_TRIP_DATE = range(6, 11)
SEARCH = 11
PRODUCT_ORDER = 12  # ‚û°Ô∏è –ù–æ–≤–∏–π —Å—Ç–∞–Ω –¥–ª—è –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—ñ–≤

# === –ö–Ω–æ–ø–∫–∏ —Ç–∞ –ø–æ—Å–∏–ª–∞–Ω–Ω—è ===
SOCIAL_LINKS = (
    "–î—è–∫—É—î–º–æ –∑–∞ –∑–∞—è–≤–∫—É!\n\n–ù–∞—à—ñ —Å–æ—Ü–º–µ—Ä–µ–∂—ñ:\n"
    "<a href='https://www.facebook.com/groups/1814614405457006?locale=uk_UA'>Facebook</a>\n"
    "<a href='https://t.me/estransuanor'>Telegram</a>"
)

CONTACT_LINKS = (
    "\nüìû –ö–æ–Ω—Ç–∞–∫—Ç–∏ –≤–æ–¥—ñ—è:\n"
    "WhatsApp: https://wa.me/380963508202\n"
    "Telegram: https://t.me/Phant0mWAdeR\n"
    "–¢–µ–ª–µ—Ñ–æ–Ω: +4796801527\n"
    "–¢–µ–ª–µ—Ñ–æ–Ω: +380963508202"
)

PRICING_URL = "https://t.me/estransuanor/13"

# === –ú–µ–Ω—é –∫–Ω–æ–ø–æ–∫ ===
def main_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üá≥üá¥ üá∫üá¶ üì¶ –û—Ñ–æ—Ä–º–∏—Ç–∏ –ø–æ—Å–∏–ª–∫—É", callback_data="make_order")],
        [InlineKeyboardButton("üßç –ü–∞—Å–∞–∂–∏—Ä", callback_data="passenger")],
        [
            InlineKeyboardButton("üìû –ó–≤‚Äô—è–∑–æ–∫ –∑ –≤–æ–¥—ñ—î–º", callback_data="contact_driver"),
            InlineKeyboardButton("üìã –£–º–æ–≤–∏ —Ç–∞ —Ä–æ–∑—Ü—ñ–Ω–∫–∏", callback_data="pricing")
        ],
        [InlineKeyboardButton("üõí –ó–∞–º–æ–≤–∏—Ç–∏ –ø—Ä–æ–¥—É–∫—Ç–∏ —Ç–∞ —ñ–Ω—à–µ", callback_data="order_products")],
        [InlineKeyboardButton("üîç –ü–æ—à—É–∫ –∑–∞—è–≤–∫–∏", callback_data="search")]
    ])

def order_type_menu():
    return InlineKeyboardMarkup([
        [InlineKeyboardButton("üá≥üá¥ –ó–∞—è–≤–∫–∞ –ø–æ—Å–∏–ª–∫–∏ –∑ –ù–æ—Ä–≤–µ–≥—ñ—ó‚¨Öüì¶", callback_data="order_norway")],
        [InlineKeyboardButton("üá∫üá¶ –ó–∞—è–≤–∫–∞ –ø–æ—Å–∏–ª–∫–∏ –∑ –£–∫—Ä–∞—ó–Ω–∏‚û°Ô∏èüì¶", callback_data="order_ukraine")]
    ])

# === –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è ===
async def safe_edit_or_send(query, text: str, reply_markup=None):
    try:
        await query.message.edit_text(text, reply_markup=reply_markup, parse_mode="HTML")
    except Exception as e:
        if "message to edit not found" in str(e).lower():
            await query.message.reply_text(text, reply_markup=reply_markup, parse_mode="HTML")
        else:
            raise

# === –û–±—Ä–æ–±–Ω–∏–∫–∏ ===
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.message:
        await update.message.reply_text("–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=main_menu())
    elif update.callback_query:
        await safe_edit_or_send(update.callback_query, "–ü—Ä–∏–≤—ñ—Ç! –û–±–µ—Ä–∏ –¥—ñ—é:", reply_markup=main_menu())
    return CHOOSING

async def auto_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    return await start(update, context)

async def choose_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query:
        return CHOOSING

    await query.answer()
    data = query.data

    if data == "make_order":
        await safe_edit_or_send(query, "–û–±–µ—Ä—ñ—Ç—å —Ç–∏–ø –∑–∞—è–≤–∫–∏:", reply_markup=order_type_menu())
        return CHOOSING_ORDER_TYPE
    elif data == "passenger":
        await safe_edit_or_send(query, "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ –ª–∞—Ç–∏–Ω–∏—Ü–µ—é:")
        return PASSENGER_NAME
    elif data == "contact_driver":
        await safe_edit_or_send(query, CONTACT_LINKS, reply_markup=main_menu())
    elif data == "pricing":
        await safe_edit_or_send(query, f"–û–∑–Ω–∞–π–æ–º—Ç–µ—Å—è –∑ —É–º–æ–≤–∞–º–∏:\n{PRICING_URL}", reply_markup=main_menu())
    elif data == "search":
        await safe_edit_or_send(query, "–í–≤–µ–¥—ñ—Ç—å —Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ—à—É–∫—É –∑–∞—è–≤–∫–∏:")
        return SEARCH
    elif data == "order_products":
        await safe_edit_or_send(
            query,
            "üõí –¢—É—Ç –≤–∏ –º–æ–∂–µ—Ç–µ –∑—Ä–æ–±–∏—Ç–∏ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –Ω–∞ –ø–æ–∫—É–ø–∫—É –Ω–∞–º–∏ –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ —Ç–∞ —ñ–Ω—à–∏—Ö —Ä–µ—á–µ–π –∑ –£–∫—Ä–∞—ó–Ω–∏ —Ç–∞ –ü–æ–ª—å—â—ñ —ñ –º–∏ –ø—Ä–∏–≤–µ–∑–µ–º–æ –≤—Å–µ —Ü–µ –≤–∞–º )\n\n"
            "–í–≤–µ–¥—ñ—Ç—å, –±—É–¥—å –ª–∞—Å–∫–∞, —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤:"
        )
        return PRODUCT_ORDER

    return CHOOSING

async def choose_order_type(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    if not query:
        return CHOOSING

    await query.answer()
    context.user_data['order_type'] = query.data

    if query.data == "order_norway":
        await safe_edit_or_send(query, "–í–≤–µ–¥—ñ—Ç—å —Å–≤–æ—î —ñ–º‚Äô—è:")
    else:
        await safe_edit_or_send(query, "–í–≤–µ–¥—ñ—Ç—å —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ –æ—Ç—Ä–∏–º—É–≤–∞—á–∞ –≤ –ù–æ—Ä–≤–µ–≥—ñ—ó:")
    return NAME

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['name'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É:")
    return PHONE

async def get_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['phone'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É (–º—ñ—Å—Ç–æ, –≤—É–ª–∏—Ü—è, –Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É):")
    return ADDRESS

async def get_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['address'] = update.message.text
    await update.message.reply_text("–ù–∞–¥–∞–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å –ø–æ—Å–∏–ª–∫–∏:")
    return MESSAGE

async def get_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['message'] = update.message.text

    user = update.effective_user
    user_id = user.id
    username = user.username or user.full_name

    summary = (
        f"üì¨ –ù–æ–≤–∞ {context.user_data['order_type']} –≤—ñ–¥ @{username} (ID: {user_id}):\n\n"
        f"üë§ –Ü–º‚Äô—è: {context.user_data['name']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['phone']}\n"
        f"üìç –ê–¥—Ä–µ—Å–∞: {context.user_data['address']}\n"
        f"üìù –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: {context.user_data['message']}"
    )

    await context.bot.send_message(chat_id=user_id, text="‚úÖ –ó–∞—è–≤–∫–∞ –ø—Ä–∏–π–Ω—è—Ç–∞!\n\n" + summary)
    await update.message.reply_text(SOCIAL_LINKS, parse_mode="HTML")
    await update.message.reply_text("–ì–æ—Ç–æ–≤–æ!", reply_markup=main_menu())
    await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=summary)

    with open(APPLICATIONS_FILE, "a", encoding="utf-8") as f:
        f.write(summary + "\n\n")

    return CHOOSING

async def get_passenger_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['passenger_name'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è (–î–î.–ú–ú.–†–†–†–†):")
    return PASSENGER_BIRTHDATE

async def get_passenger_birthdate(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['passenger_birthdate'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω—É –¥–ª—è –∑–≤'—è–∑–∫—É:")
    return PASSENGER_PHONE

async def get_passenger_phone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['passenger_phone'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –∞–¥—Ä–µ—Å—É –∑–∞–±–æ—Ä—É (–º—ñ—Å—Ç–æ, –≤—É–ª–∏—Ü—è, –Ω–æ–º–µ—Ä –±—É–¥–∏–Ω–∫—É):")
    return PASSENGER_ADDRESS

async def get_passenger_address(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['passenger_address'] = update.message.text
    await update.message.reply_text("–í–≤–µ–¥—ñ—Ç—å –¥–∞—Ç—É –ø–æ—ó–∑–¥–∫–∏ (–î–î.–ú–ú.–†–†–†–†):")
    return PASSENGER_TRIP_DATE

async def get_passenger_trip_date(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data['passenger_trip_date'] = update.message.text

    user = update.effective_user
    user_id = user.id
    username = user.username or user.full_name

    summary = (
        f"üöå –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞ –ø–∞—Å–∞–∂–∏—Ä–∞ –≤—ñ–¥ @{username} (ID: {user_id}):\n\n"
        f"üë§ –Ü–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ: {context.user_data['passenger_name']}\n"
        f"üéÇ –î–∞—Ç–∞ –Ω–∞—Ä–æ–¥–∂–µ–Ω–Ω—è: {context.user_data['passenger_birthdate']}\n"
        f"üìû –¢–µ–ª–µ—Ñ–æ–Ω: {context.user_data['passenger_phone']}\n"
        f"üìç –ê–¥—Ä–µ—Å–∞ –∑–∞–±–æ—Ä—É: {context.user_data['passenger_address']}\n"
        f"üìÖ –î–∞—Ç–∞ –ø–æ—ó–∑–¥–∫–∏: {context.user_data['passenger_trip_date']}"
    )

    await context.bot.send_message(chat_id=user_id, text="‚úÖ –î–∞–Ω—ñ –ø—Ä–∏–π–Ω—è—Ç—ñ!\n\n" + summary)
    await update.message.reply_text(SOCIAL_LINKS, parse_mode="HTML")
    await update.message.reply_text("–ì–æ—Ç–æ–≤–æ!", reply_markup=main_menu())
    await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=summary)

    with open(APPLICATIONS_FILE, "a", encoding="utf-8") as f:
        f.write(summary + "\n\n")

    return CHOOSING

async def search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.message.text.lower()

    if not os.path.exists(APPLICATIONS_FILE):
        await update.message.reply_text("üìÇ –ë–∞–∑–∞ –∑–∞—è–≤–æ–∫ –ø–æ–∫–∏ –ø—É—Å—Ç–∞.", reply_markup=main_menu())
        return CHOOSING

    with open(APPLICATIONS_FILE, "r", encoding="utf-8") as f:
        data = f.read().lower()

    results = []
    applications = data.split("\n\n")
    for app in applications:
        if query in app:
            results.append(app.strip())

    if results:
        for res in results:
            await update.message.reply_text(f"üîé –ó–Ω–∞–π–¥–µ–Ω–æ –∑–∞—è–≤–∫—É:\n\n{res}")
    else:
        await update.message.reply_text("‚ùå –ù—ñ—á–æ–≥–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")

    await update.message.reply_text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=main_menu())
    return CHOOSING

async def get_product_order(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    user_id = user.id
    username = user.username or user.full_name

    order_list = update.message.text

    summary = (
        f"üõí –ù–û–í–ï –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—ñ–≤ –≤—ñ–¥ @{username} (ID: {user_id}):\n\n"
        f"üìù –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä—ñ–≤:\n{order_list}"
    )

    await context.bot.send_message(chat_id=user_id, text="‚úÖ –í–∞—à–µ –∑–∞–º–æ–≤–ª–µ–Ω–Ω—è –ø—Ä–∏–π–Ω—è—Ç–µ!\n\n" + summary)
    await update.message.reply_text(SOCIAL_LINKS, parse_mode="HTML")
    await update.message.reply_text("–ì–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é:", reply_markup=main_menu())
    await context.bot.send_message(chat_id=ADMIN_CHAT_ID, text=summary)

    with open(APPLICATIONS_FILE, "a", encoding="utf-8") as f:
        f.write(summary + "\n\n")

    return CHOOSING

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–°–∫–∞—Å–æ–≤–∞–Ω–æ.", reply_markup=main_menu())
    return CHOOSING

# === –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –∑–∞—Å—Ç–æ—Å—É–Ω–∫—É ===
app = ApplicationBuilder().token(TOKEN).build()

conv_handler = ConversationHandler(
    entry_points=[
        CommandHandler("start", start),
        MessageHandler(filters.StatusUpdate.NEW_CHAT_MEMBERS | filters.StatusUpdate.LEFT_CHAT_MEMBER, auto_start),
        MessageHandler(filters.TEXT & ~filters.COMMAND, auto_start),
        CallbackQueryHandler(choose_action)
    ],
    states={
        CHOOSING: [CallbackQueryHandler(choose_action)],
        CHOOSING_ORDER_TYPE: [CallbackQueryHandler(choose_order_type)],
        NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
        PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_phone)],
        ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_address)],
        MESSAGE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_message)],
        PASSENGER_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_passenger_name)],
        PASSENGER_BIRTHDATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_passenger_birthdate)],
        PASSENGER_PHONE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_passenger_phone)],
        PASSENGER_ADDRESS: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_passenger_address)],
        PASSENGER_TRIP_DATE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_passenger_trip_date)],
        SEARCH: [MessageHandler(filters.TEXT & ~filters.COMMAND, search)],
        PRODUCT_ORDER: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_product_order)],
    },
    fallbacks=[CommandHandler("cancel", cancel)],
)

app.add_handler(conv_handler)

if __name__ == "__main__":
    print("üü¢ Estrans Cargo Bot is running (polling)...")
    app.run_polling()
